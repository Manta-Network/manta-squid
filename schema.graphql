# Copied Governance data from https://raw.githubusercontent.com/litentry/squid/main/prawns/governance/schema.graphql
enum SubstrateNetwork {
  polkadot,
  kusama,
  phala,
  moonbeam,
  calamari
}

type Block @entity {
  "network:blockNumber"
  id: ID!
  network: String!
  date: DateTime!
  # timeSinceLastBlock: Int!
  authorAddressSS58: String!
  partOfSession: Session!
}

enum ProposalState {
  proposed,
  voting,
  approved,
  enacted,
  disapproved,
  closed
}

type Session @entity{
  "network:session_index"
  id: ID!
  type: String!
  network: String!
  sessionIndex: Int!
  startedAt: DateTime!
  endedAt: DateTime
  blocks: [Block]! @derivedFrom(field: "partOfSession")
  activeValidators: [String]!
}

# type SubstrateTechnicalCommittee @entity {
#   "network:???"
#   id: ID!
#   members: [SubstrateGovernanceAccount]
#   memberCount: Int!
#   proposals: [SubstrateTechcommProposal]! @derivedFrom(field: "council")
# }

type SubstrateTechcommProposal @entity {
  "network:proposal_index"
  id: ID!
  # council: SubstrateTechnicalCommittee!
  proposal: String! @index #proposal hash
  proposer: SubstrateGovernanceAccount!
  introducedAtBlock: BigInt!
  date: DateTime!
  state: ProposalState!
  network: SubstrateNetwork!
  ayes: Int!
  nays: Int!
  voteCount: Int!
  voteThreshold: Int!
  votes: [SubstrateTechcommVote]! @derivedFrom(field: "proposal")
  # totalProposalSeconds: Int!
}

type SubstrateGovernanceAccount @entity {
  "address"
  id: ID!
  "hex address"
  rootAccount: String! @index
  network: SubstrateNetwork!
  totalProposalSeconds: Int!
  "includes both normal proposal votes and votes as a council member from council.vote()"
  totalProposalVotes: Int!
  totalElectionVotes: Int!
  councilVotes: [SubstrateCouncilVote]! @derivedFrom(field: "account")
  techcommVotes: [SubstrateTechcommVote]! @derivedFrom(field: "account")
  proposalsIntroduced: [SubstrateTechcommProposal]! @derivedFrom(field: "proposer")
  proposalVotes: [SubstrateProposalVote]! @derivedFrom(field: "account")
  proposalSeconds: [SubstrateProposalSecond]! @derivedFrom(field: "account")
  electionVotes: [SubstrateElectionVote]! @derivedFrom(field: "account")
}

type SubstrateElectionVote @entity {
  "network:block:index"
  id: ID!
  network: SubstrateNetwork!
  account: SubstrateGovernanceAccount!
  rootAccount: String! @index
  blockNumber: BigInt!
  date: DateTime!
  candidates: [String!]!
  amount: BigInt!
}

type SubstrateTechcommVote @entity {
  "network:block:index"
  id: ID!
  network: SubstrateNetwork!
  account: SubstrateGovernanceAccount!
  rootAccount: String! @index
  blockNumber: BigInt!
  date: DateTime!
  proposal: SubstrateTechcommProposal!
  approve: Boolean!
}

type SubstrateCouncilVote @entity {
  "network:block:index"
  id: ID!
  network: SubstrateNetwork!
  account: SubstrateGovernanceAccount!
  rootAccount: String! @index
  blockNumber: BigInt!
  date: DateTime!
  proposalIndex: Int! @index
  proposal: String!
  approve: Boolean!
}

type SubstrateProposalVote @entity {
  "network:block:index"
  id: ID!
  network: SubstrateNetwork!
  account: SubstrateGovernanceAccount!
  rootAccount: String! @index
  blockNumber: BigInt!
  date: DateTime!
  refIndex: Int! @index
  "not sure how to interpret this properly yet so using JSON.stringify() and saving raw"
  vote: String!
}

type SubstrateProposalSecond @entity {
  "network:block:index"
  id: ID!
  network: SubstrateNetwork!
  account: SubstrateGovernanceAccount!
  rootAccount: String! @index
  blockNumber: BigInt!
  date: DateTime!
  proposalIndex: Int! @index
  upperBound: Int
}

type Account @entity {
  "Account address"
  id: ID!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")
}

type HistoricalBalance @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  date: DateTime!
}
